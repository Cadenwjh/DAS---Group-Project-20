plot1 <- ggplot(fitted_values, aes(lifeExp_hat, residual)) + geom_jitter(width = 0.1) + labs(x = "Fitted Values", y = "Residual") + geom_hline(yintercept = 0, color = "blue")
plot2 <- ggplot(fitted_values, aes(continent, residual)) + geom_jitter(width = 0.1) + labs(x = "Continent", y = "Residual") + geom_hline(yintercept = 0, color = "blue")
plot2
plot1
##############MULTIPLE LINEAR REGRESSION##############
library(ggplot2)
library(dplyr)
library(moderndive)
library(ISLR)
install.packages("ISLR")
library(ISLR)
library(plotly)
install.packages("plotly")
library(plotly)
install.packages("skimr")
install.packages("skimr")
library(skimr)
library(tidyr)
install.packages("jtools")
library(jtools)
View(Credit)
Cred <- Credit %>%
select(Balance, Limit, Income)
head(Cred)
glimpse(Cred)
Cred %>% skim()
###correlation between variables
Cred %>% cor()
###correlation between each variable
Cred %>% cor()
###the correlation between each variable to Balance variable
ggplot(Cred, aes(Limit, Balance)) + geom_point() + labs(x = "Credit Limit in $", y = "Credit Balance in $", title = "Relationship between balance and credit limit")
###the correlation between each variable to Balance variable
ggplot(Cred, aes(Limit, Balance)) + geom_point() + labs(x = "Credit Limit in $", y = "Credit Balance in $", title = "Relationship between balance and credit limit") + geom_smooth(method = "lm", se = FALSE)
ggplot(Cred, des(Income, Balance)) + geom_point() + labs(x = "Income in $1000", y = "Credit Balance in $", title = "Relationship between balance and income") + geom_smooth(method = "lm", se = FALSE)
ggplot(Cred, aes(Income, Balance)) + geom_point() + labs(x = "Income in $1000", y = "Credit Balance in $", title = "Relationship between balance and income") + geom_smooth(method = "lm", se = FALSE)
###plotting all variables
plot_ly(Cred, x = ~Income, y = ~Limit, z = ~Balance, type = "scatter3d", mode = "markers")
###fitting the model
Balance_Model <- lm(Balance ~ Limit + Income, data = Cred)
###get the fitted value. but we have to define the model first
regression_points <- get_regression_points(model)
regression_points
summary(Balance_Model)
###get the fitted values
fitted_values_Balance <- get_regression_table(Balance_Model)
fitted_values_Balance
###Showing all parameters estimation
parameter_estimate <- get_regression_table(Balance_Model)
parameter_estimate
###get the fitted values
fitted_values <- get_regression_points(Balance_Model)
fitted_values
###checking the assumptions --> mean of residuals are zero
ggplot(fitted_values, aes(Limit, residual)) + geom_point() + labs(x = "Limit Credit in $", y = "Residuals", title = "Limit Credit vs Residual") + geom_hline(yintercept = 0, col="red", size = 2)
ggplot(fitted_values, aes(Income, residual)) + geom_point() + labs(x = "Income in $1000", y = "Residuals", title = "Income vs Residual") + geom_hline(yintercept = 0, col="yellow", size = 2)
###checking the asssumptions --> the residuals are normally distributed
ggplot(fitted_values, aes(residual)) + geom_histogram(binwidth = 40, col = "blue") + labs(x = "Residuals")
##############MULTIPLE LINEAR REGRESSION - ONE CONTINOUS AND ONE CATEGORICAL VARIABLE##############
evals_score_age_gender <- evals %>%
select(score, age, gender)
evals_score_age_gender %>% skim()
glimpse(evals_score_age_gender)
###correlation between variables
evals_score_age_gender %>% get_correlation(formula = score ~ age)
evals.score %>% get_correlation(formula = score ~ bty_avg)
###correlation between each variable
Cred %>% cor()
evals_score_age_gender %>% cor()
###the correlation between each variable to outcome variable by plot
ggplot(evals_score_age_gender, aes(age, score, col = gender)) + geom_jitter() + labs(x = "Age", y = "Teaching Score", col = "Gender") + geom_smooth(method = "lm", se = FALSE)
###the correlation between each variable to outcome variable by plot
ggplot(evals_score_age_gender, aes(x = age, y = score, col = gender)) + geom_jitter() + labs(x = "Age", y = "Teaching Score", col = "Gender") + geom_smooth(method = "lm", se = FALSE)
###the correlation between each variable to outcome variable by plot
ggplot(evals_score_age_gender, aes(x = age, y = score, col = gender)) + geom_jitter() + labs(x = "Age", y = "Teaching Score", col = "Gender") + geom_smooth(method = "lm", se = FALSE)
###the correlation between each variable to outcome variable by plot
ggplot(evals_score_age_gender, aes(x = age, y = score, col = gender)) + geom_jitter() + labs(x = "Age", y = "Teaching Score", col = "Gender") + geom_smooth(method = "lm", se = FALSE)
###fitting the model
model_2covariates <- lm(score ~ age + gender, data = evals_score_age_gender)
model_2covariates
###Showing all parameters estimation
get_regression_table(model_2covariates)
###Superimpose our parallel regression lines onto the scatterplot of teaching score against age
coeff <- model_2covariates %>% coef() %>% as.numeric()
coeff
slopes <- evals_score_age_gender %>%
group_by(gender) %>%
summarise(minimum_age = min(age), maximum_age = max(age)) %>%
mutate(intercept = coeff[1]) %>%
mutate(intercept = ifelse(gender == "male", intercept + coeff[3], intercept)) %>%
gather(point, age, -c(gender, intercept))%>%
mutate(y_hat = intercept + age * coeff[2])
slopes
slopes <- evals_score_age_gender %>%
group_by(gender) %>%
summarise(minimum_age = min(age), maximum_age = max(age)) %>%
mutate(intercept = coeff[1]) %>%
mutate(intercept = ifelse(gender == "male", intercept + coeff[3], intercept)) %>%
gather(point, age, -c(gender, intercept))%>%
mutate(y_hat = intercept + age * coeff[2])
View(evals_score_age_gender)
ggplot(evals_score_age_gender, aes(age, score, col = gender)) + geom_jitter() + labs(x = "Age", y = "Teaching Score", col = "Gender") + geom_line(slopes, aes(y_hat), size = 2)
ggplot(evals_score_age_gender, aes(x = age, y = score, col = gender)) + geom_jitter() + labs(x = "Age", y = "Teaching Score", col = "Gender") + geom_line(slopes, aes(y = y_hat), size = 2)
ggplot(evals_score_age_gender, aes(x = age, y = score, col = gender)) + geom_jitter() + labs(x = "Age", y = "Teaching Score", col = "Gender") + geom_line(data = slopes, aes(y = y_hat), size = 2)
slopes
###mutilpe regression model with interaction among covariate variables
multiple_regres <- lm(score ~ age*gender, data = evals_score_age_gender)
###summary of the variables
get_regression_table(multiple_regres)
###get the different slopes (different from the previous case)
ggplot(evals_score_age_gender, aes(x= age, y = score, col=gender)) + geom_jitter() + labs(x = "Age", y = "Score", col = "Gender") + geom_smooth(method = "lm", se = FALSE)
###the correlation between each variable to outcome variable by plot
ggplot(evals_score_age_gender, aes(x = age, y = score, col = gender)) + geom_jitter() + labs(x = "Age", y = "Teaching Score", col = "Gender") + geom_smooth(method = "lm", se = FALSE)
###get fitted values
fitted_values_multiple <- get_regression_points(multiple_regres)
fitted_values_multiple
###assumption the residuals againts the covariate variables by gender
ggplot(data = fitted_values_multiple, aes(x = age, y = residual)) + geom_point() + labs(x = "Age", y = "Residuals", title = "Residual vs Age by Gender") + geom_line(yintercept = 0, col = "red", size = 2) + facet_wrap(~gender)
###assumption the residuals againts the covariate variables by gender
ggplot(data = fitted_values_multiple, aes(x = age, y = residual)) + geom_point() + labs(x = "Age", y = "Residuals", title = "Residual vs Age by Gender") + geom_hline(yintercept = 0, col = "red", size = 2) + facet_wrap(~gender)
exp(-2.61131)
exp(-1.12216)
exp(-2.32917)
exp(-0.03330)
#'
#'  ## Loading R library
#' Firstly, let's load up the library and the data used in Lab 1.
par(ask=FALSE)
library('fda')
load("all.RData")
data(CanadianWeather)
temp = CanadianWeather$dailyAv[,,1]
precip = CanadianWeather$dailyAv[,,2]
daytime = (1:365)-0.5
day5 = seq(0,365,5)
dayrng = c(0,365)
fbasis =  create.fourier.basis(dayrng,65)
harmLfd = vec2Lfd(c(0,(2*pi/365)^2,0),rangeval=dayrng)
temp.fdPar = fdPar(fbasis,harmLfd,1e-2)
tempSmooth = smooth.basis(daytime,temp,temp.fdPar)
tempfd = tempSmooth$fd
annualprec = log10( apply(precip,2,mean))
xlist = list(len=2)
xlist[[1]] = rep(1,35)
xlist[[2]] = tempfd
bwtlist = list(len=2)
cbasis = create.constant.basis(dayrng)
bwtlist[[1]] = fdPar(cbasis)
beta.fdPar = fdPar(fbasis,harmLfd,10^12.5)
prec.model = fRegress(annualprec,xlist,bwtlist)
names(prec.model)
prec.model$betaestlist[[1]]$fd$coef
prec.model = fRegress(annualprec,xlist,bwtlist)
bwtlist[[2]] = beta.fdPar
prec.model = fRegress(annualprec,xlist,bwtlist)
annualprec = log10( apply(precip,2,mean))
annualprec
tempfd
annualprec
View(annualprec)
xlist = list(len=2)
View(xlist)
xlist[[1]] = rep(1,35)
xlist[[2]] = tempfd
View(xlist)
bwtlist = list(len=2)
View(bwtlist)
cbasis = create.constant.basis(dayrng)
bwtlist[[1]] = fdPar(cbasis)
View(bwtlist)
bwtlist[[1]] = fdPar(cbasis)
beta.fdPar = fdPar(fbasis,harmLfd,10^12.5)
bwtlist[[2]] = beta.fdPar
View(beta.fdPar)
prec.model = fRegress(annualprec,xlist,bwtlist)
names(prec.model)
prec.model$betaestlist[[1]]$fd$coef
plot(prec.model$betaestlist[[2]])
lambdas = 10^(seq(5,15,0.5))
ocvs = rep(0,length(lambdas))
View(lambdas)
length(lambdas)
for(ilam in 1:length(lambdas)){
bwtlisti = bwtlist                # define temporary beta.fdPar and bwtlist
beta.fdPari = beta.fdPar
beta.fdPari$lambda = lambdas[ilam]   # update lambda
bwtlisti[[2]] = beta.fdPari
prec.modeli = fRegress(annualprec,xlist,bwtlisti)
ocvs[ilam] = prec.modeli$OCV        # record ocv
}
lambdas = 10^(seq(5,15,0.5))
View(lambdas)
length(lambdas)
ocvs = rep(0,length(lambdas))
for(ilam in 1:length(lambdas)){
bwtlisti = bwtlist                # define temporary beta.fdPar and bwtlist
beta.fdPari = beta.fdPar
beta.fdPari$lambda = lambdas[ilam]   # update lambda
bwtlisti[[2]] = beta.fdPari
prec.modeli = fRegress(annualprec,xlist,bwtlisti)
ocvs[ilam] = prec.modeli$OCV        # record ocv
}
plot(lambdas,ocvs,type='b',log='x')
prec.model$df
yhat = prec.model$yhatfdobj
plot(yhat,annualprec)
abline(c(0,1))
sigma = sum( (annualprec-yhat)^2 )/(35-prec.model$df)
sigma = sum( (annualprec-yhat)^2 )/(35-prec.model$df)
sigma
sigmaE = sigma*diag(35)
prec.stderr = fRegress.stderr(prec.model,NULL,sigmaE)
betahat = prec.model$betaestlist[[2]]
betastd = prec.stderr$betastderrlist[[2]]
library(dplyr)
library(ggplot2)
library(faraway)
library(gridExtra)
library(MASS)
library(plyr)
library(dplyr)
library(sjPlot)
library(AER)
data <- read.csv('dataset20.csv', stringsAsFactors = FALSE)
data <- read.csv('dataset20.csv', stringsAsFactors = FALSE)
setwd("~/Documents/UofG/Data Analysis Skill/Group Project 2/Git/DAS-Groupt20")
data <- read.csv('dataset20.csv', stringsAsFactors = FALSE)
str(data)
data$animal_type <- as.factor(data$animal_type)
data$intake_type <- as.factor(data$intake_type)
data$chip_status <- as.factor(data$chip_status)
glm_poisson <- glm(time_at_shelter ~ animal_type + month + year + intake_type + chip_status, family = "poisson", data = data)
summary(glm_poisson)
plot(model$fitted.values, residuals(model, type = "deviance"),
xlab = "Fitted Values", ylab = "Deviance Residuals")
abline(h = 0, col = "red")
dispersiontest(glm_poisson)
par(mfrow=c(2,2))
plot(glm_poisson)
dispersiontest(glm_poisson)
ggplot(glm_poisson, aes(x = log(fitted(glm_poisson)), y = log((data$time_at_shelter - fitted(glm_poisson))^2))) + geom_point(col = "green") + geom_abline(slope = 1, intercept = 0, col = "red", size = 1) + ylab(expression((y-hat(mu))^2)) + xlab(expression(hat(mu)))
dispersiontest(glm_poisson)
ggplot(glm_poisson, aes(x = log(fitted(glm_poisson)), y = log((data$time_at_shelter - fitted(glm_poisson))^2))) + geom_point(col = "orange") + geom_abline(slope = 1, intercept = 0, col = "red", size = 1) + ylab(expression((y-hat(mu))^2)) + xlab(expression(hat(mu)))
#| echo: false
#| fig-cap: Relationship between sepal width and sepal length by species.
#| label: fig-scat
#| fig-align: center
#| fig-width: 4.5
#| fig-height: 3.5
ggplot(glm_poisson, aes(x = log(fitted(glm_poisson)), y = log((data$time_at_shelter - fitted(glm_poisson))^2))) + geom_point(col = "green") + geom_abline(slope = 1, intercept = 0, col = "red", size = 1) + ylab(expression((y-hat(mu))^2)) + xlab(expression(hat(mu)))
#| echo: false
#| fig-cap: Relationship between sepal width and sepal length by species.
#| label: fig-scat
#| fig-align: center
#| fig-width: 4.5
#| fig-height: 3.5
ggplot(glm_poisson, aes(x = log(fitted(glm_poisson)), y = log((data$time_at_shelter - fitted(glm_poisson))^2))) + geom_point(col = "#DD7A65") + geom_abline(slope = 1, intercept = 0, col = "red", size = 1) + ylab(expression((y-hat(mu))^2)) + xlab(expression(hat(mu)))
#| echo: false
#| fig-cap: Relationship between sepal width and sepal length by species.
#| label: fig-scat
#| fig-align: center
#| fig-width: 4.5
#| fig-height: 3.5
ggplot(glm_poisson, aes(x = log(fitted(glm_poisson)), y = log((data$time_at_shelter - fitted(glm_poisson))^2))) + geom_point(col = "#DD7A65") + geom_abline(slope = 1, intercept = 0, col = "#B3DD65", size = 1) + ylab(expression((y-hat(mu))^2)) + xlab(expression(hat(mu)))
#| echo: false
#| fig-cap: Relationship between sepal width and sepal length by species.
#| label: fig-scat
#| fig-align: center
#| fig-width: 4.5
#| fig-height: 3.5
ggplot(glm_poisson, aes(x = log(fitted(glm_poisson)), y = log((data$time_at_shelter - fitted(glm_poisson))^2))) + geom_point(col = "#DD7A65") + geom_abline(slope = 1, intercept = 0, col = "#F5F105", size = 1) + ylab(expression((y-hat(mu))^2)) + xlab(expression(hat(mu)))
#| echo: false
#| fig-cap: Relationship between sepal width and sepal length by species.
#| label: fig-scat
#| fig-align: center
#| fig-width: 4.5
#| fig-height: 3.5
ggplot(glm_poisson, aes(x = log(fitted(glm_poisson)), y = log((data$time_at_shelter - fitted(glm_poisson))^2))) + geom_point(col = "#DD7A65") + geom_abline(slope = 1, intercept = 0, col = "#0515F5", size = 1) + ylab(expression((y-hat(mu))^2)) + xlab(expression(hat(mu)))
#| echo: false
#| fig-cap: Relationship between sepal width and sepal length by species.
#| label: fig-scat
#| fig-align: center
#| fig-width: 4.5
#| fig-height: 3.5
ggplot(glm_poisson, aes(x = log(fitted(glm_poisson)), y = log((data$time_at_shelter - fitted(glm_poisson))^2))) + geom_point(col = "#DD7A65") + geom_abline(slope = 1, intercept = 0, col = "#05F5AD", size = 1) + ylab(expression((y-hat(mu))^2)) + xlab(expression(hat(mu)))
#| echo: false
#| fig-cap: Relationship between sepal width and sepal length by species.
#| label: fig-scat
#| fig-align: center
#| fig-width: 4.5
#| fig-height: 3.5
ggplot(glm_poisson, aes(x = log(fitted(glm_poisson)), y = log((data$time_at_shelter - fitted(glm_poisson))^2))) + geom_point(col = "#DD7A65") + geom_abline(slope = 1, intercept = 0, col = "#F58B05", size = 1) + ylab(expression((y-hat(mu))^2)) + xlab(expression(hat(mu)))
plot(model$fitted.values, residuals(model, type = "deviance"),
xlab = "Fitted Values", ylab = "Deviance Residuals")
abline(h = 0, col = "red")
plot(glm_poisson$fitted.values, residuals(glm_poisson, type = "deviance"),
xlab = "Fitted Values", ylab = "Deviance Residuals")
abline(h = 0, col = "red")
plot(glm_poisson$fitted.values, residuals(glm_poisson, type = "deviance"),
xlab = "Fitted Values", ylab = "Deviance Residuals")
abline(h = 0, col = "red")
plot(glm_poisson$fitted.values, residuals(glm_poisson, type = "deviance"),
xlab = "Fitted Values", ylab = "Deviance Residuals")
abline(h = 0, col = "red")
plot(glm_poisson$fitted.values, residuals(glm_poisson, type = "deviance"),
xlab = "Fitted Values", ylab = "Deviance Residuals")
abline(h = 0, col = "red")
#| echo: false
#| fig-cap: Residuals Plot for Assessing Dispersion in Poisson Regression.
#| label: fig-resid
#| fig-align: center
#| fig-width: 4.5
#| fig-height: 3.5
plot(glm_poisson$fitted.values, residuals(glm_poisson, type = "deviance"),
xlab = "Fitted Values", ylab = "Deviance Residuals")
abline(h = 0, col = "red")
#| echo: false
#| fig-cap: Residuals Plot for Assessing Dispersion in Poisson Regression.
#| label: fig-resid
#| fig-align: center
#| fig-width: 4.5
#| fig-height: 3.5
plot(glm_poisson$fitted.values, residuals(glm_poisson, type = "deviance"),
xlab = "Fitted Values", ylab = "Deviance Residuals", cex.main=1.5, cex.lab=1.5, cex.axis=1.2, pch=20, cex=1.5)
abline(h = 0, col = "red")
#| echo: false
#| fig-cap: Residuals vs. Fitted Values Plot for Poisson Regression Model
#| label: fig-resid_analysis1
#| fig-align: center
#| fig-width: 4.5
#| fig-height: 3.5
plot(glm_poisson$fitted.values, residuals(glm_poisson, type = "deviance"),
xlab = "Fitted Values", ylab = "Deviance Residuals")
abline(h = 0, col = "red")
#| echo: false
#| fig-cap: Residuals vs. Fitted Values Plot for Poisson Regression Model
#| label: fig-resid_analysis1
#| fig-align: center
#| fig-width: 4.5
#| fig-height: 3.5
plot(glm_poisson$fitted.values, residuals(glm_poisson, type = "deviance"),
xlab = "Fitted Values", ylab = "Deviance Residuals", pch = 20)
abline(h = 0, col = "red")
#| echo: false
#| fig-cap: Residuals vs. Fitted Values Plot for Poisson Regression Model
#| label: fig-resid_analysis1
#| fig-align: center
#| fig-width: 4.5
#| fig-height: 3.5
qqnorm(residuals(glm_poisson, type = "deviance"))
qqline(residuals(glm_poisson, type = "deviance"))
#| echo: false
#| fig-cap: Residuals vs. Leverage Plot
#| label: fig-resid_analysis4
#| fig-align: center
#| fig-width: 4.5
#| fig-height: 3.5
plot(hatvalues(model), residuals(glm_poisson, type = "pearson"),
xlab = "Leverage", ylab = "Pearson Residuals")
#| echo: false
#| fig-cap: Residuals vs. Leverage Plot
#| label: fig-resid_analysis4
#| fig-align: center
#| fig-width: 4.5
#| fig-height: 3.5
plot(hatvalues(glm_poisson), residuals(glm_poisson, type = "pearson"),
xlab = "Leverage", ylab = "Pearson Residuals")
abline(h = 0, col = "red")
#| echo: false
#| fig-cap: Residuals vs. Leverage Plot
#| label: fig-resid_analysis4
#| fig-align: center
#| fig-width: 4.5
#| fig-height: 3.5
plot(hatvalues(glm_poisson), residuals(glm_poisson, type = "pearson"),
xlab = "Leverage", ylab = "Pearson Residuals")
abline(h = 0, col = "red")
#| echo: false
#| fig-cap: Residuals QQ Plot
#| label: fig-resid_analysis2
#| fig-align: center
#| fig-width: 4.5
#| fig-height: 3.5
qqnorm(residuals(glm_poisson, type = "deviance"), col = "blue", pch = 16)
qqline(residuals(glm_poisson, type = "deviance"), col = "red", lwd = 2)
#| echo: false
#| fig-cap: Residuals vs. Fitted Values Plot for Poisson Regression Model
#| label: fig-resid_analysis1
#| fig-align: center
#| fig-width: 4.5
#| fig-height: 3.5
plot(glm_poisson$fitted.values, residuals(glm_poisson, type = "deviance"),
xlab = "Fitted Values", ylab = "Deviance Residuals", pch = 20)
abline(h = 0, col = "red")
#| echo: false
#| fig-cap: Residuals QQ Plot
#| label: fig-resid_analysis2
#| fig-align: center
#| fig-width: 4.5
#| fig-height: 3.5
qqnorm(residuals(glm_poisson, type = "deviance"), col = "blue", pch = 16)
qqline(residuals(glm_poisson, type = "deviance"), col = "red", lwd = 2)
#| echo: false
#| fig-cap: Scale-Location Plot (Spread vs. Level Plot)
#| label: fig-resid_analysis2
#| fig-align: center
#| fig-width: 4.5
#| fig-height: 3.5
plot(glm_poisson$fitted.values, sqrt(abs(residuals(model, type = "pearson"))),
xlab = "Fitted Values", ylab = "√|Standardized Pearson Residuals|")
#| echo: false
#| fig-cap: Scale-Location Plot (Spread vs. Level Plot)
#| label: fig-resid_analysis2
#| fig-align: center
#| fig-width: 4.5
#| fig-height: 3.5
plot(glm_poisson$fitted.values, sqrt(abs(residuals(glm_poisson, type = "pearson"))), xlab = "Fitted Values", ylab = "√|Standardized Pearson Residuals|")
#| echo: false
#| fig-cap: Residuals vs. Leverage Plot
#| label: fig-resid_analysis3
#| fig-align: center
#| fig-width: 4.5
#| fig-height: 3.5
plot(hatvalues(glm_poisson), residuals(glm_poisson, type = "pearson"),
xlab = "Leverage", ylab = "Pearson Residuals")
abline(h = 0, col = "red")
glm_nb <- glm.nb(time_at_shelter ~ animal_type + month + year + intake_type + chip_status, data = data)
summary(glm_nb)
plot_model(glm_nb,show.values = TRUE)
CI <- exp(confint.default(glm__nb))
aic_poisson <- AIC(glm_poisson)
aic_nb <- AIC(glm_nb)
aic_poisson
aic_nb
drop1(glm_nb, test = "F")
par(mfrow=c(2,2))
plot(glm_nb)
# QQ plot is not good
plot_model(glm_nb,show.values = TRUE)
CI <- exp(confint.default(glm_nb))
# animal_type contains 1
# chip_status contains 1
#| echo: false
#| result = "hide"
data <- read.csv('dataset20.csv', stringsAsFactors = FALSE)
str(data)
data$animal_type <- as.factor(data$animal_type)
data$intake_type <- as.factor(data$intake_type)
data$chip_status <- as.factor(data$chip_status)
{r echo=FALSE, results='hide'}
{echo=FALSE, results='hide'}
#| {echo=FALSE, results='hide'}
data <- read.csv('dataset20.csv', stringsAsFactors = FALSE)
str(data)
data$animal_type <- as.factor(data$animal_type)
data$intake_type <- as.factor(data$intake_type)
data$chip_status <- as.factor(data$chip_status)
#| echo: false
dispersiontest(glm_poisson)
glm_nb <- glm.nb(time_at_shelter ~ animal_type + month + year + intake_type + chip_status, data = data)
summary(glm_nb)
plot_model(glm_nb,show.values = TRUE)
CI <- exp(confint.default(glm_nb))
# animal_type contains 1
# chip_status contains 1
#| echo: false
glm_poisson <- glm(time_at_shelter ~ animal_type + month + year + intake_type + chip_status, family = "poisson", data = data)
summary(glm_poisson)
levels(data$animal_type)
levels(data$animal_type)
levels(data$intake_type)
levels(data$animal_type)
levels(data$intake_type)
levels(data$chip_status)
glm_nb <- glm.nb(time_at_shelter ~ animal_type + month + year + intake_type + chip_status, data = data)
summary(glm_nb)
glm_nb <- glm.nb(time_at_shelter ~ animal_type + month + year + intake_type + chip_status, data = data)
summary(glm_nb)
#| echo: false
glm_poisson <- glm(time_at_shelter ~ animal_type + month + year + intake_type + chip_status, family = "poisson", data = data)
summary(glm_poisson)
glm_nb <- glm.nb(time_at_shelter ~ animal_type + month + year + intake_type + chip_status, data = data)
summary(glm_nb)
plot_model(glm_nb,show.values = TRUE)
CI <- exp(confint.default(glm_nb))
# animal_type contains 1
# chip_status contains 1
CI
glm_nb <- glm.nb(time_at_shelter ~ animal_type + month + year + intake_type + chip_status, data = data)
summary(glm_nb)
glm_nb <- glm.nb(time_at_shelter ~ animal_type + month + year + intake_type + chip_status, data = data)
summary(glm_nb)
plot(residuals(glm_nb, type = "pearson") ~ fitted(glm_nb),
ylab = "Pearson Residuals", xlab = "Fitted Values")
plot(residuals(glm_nb, type = "pearson") ~ fitted(glm_nb),
ylab = "Pearson Residuals", xlab = "Fitted Values")
abline(h = 0, col = "red")
#| echo: false
#| fig-cap: Residuals vs. Fitted Values Plot
#| label: fig-resid_analysis4
#| fig-align: center
#| fig-width: 4
#| fig-height: 3
plot(residuals(glm_nb, type = "pearson") ~ fitted(glm_nb), ylab = "Pearson Residuals", xlab = "Fitted Values")
abline(h = 0, col = "red")
#| echo: false
#| fig-cap: Scale-Location Plot
#| label: fig-resid_analysis4
#| fig-align: center
#| fig-width: 4
#| fig-height: 3
plot(sqrt(abs(residuals(glm_nb, type = "pearson"))) ~ fitted(glm_nb), ylab = "Square Root of |Pearson Residuals|", xlab = "Fitted Values")
